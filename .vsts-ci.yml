resources:
- repo: self
phases:
- phase: Windows_Build

  queue:
    name: Hosted VS2017
    condition: succeeded()
  steps:
  - powershell: |  
     # Write your powershell commands here.
     
     $xml = [xml] (Get-Content CurrentVersion.props)
     $major = $xml.Project.PropertyGroup.MajorVersion
     $minor = $xml.Project.PropertyGroup.MinorVersion
     $micro = $xml.Project.PropertyGroup.MicroVersion
     $serial = $xml.Project.PropertyGroup.ReleaseSerial
     $level = $xml.Project.PropertyGroup.ReleaseLevel
     
     if($level -eq 'final') {
         $PackageVersion = "$major.$minor.$micro"
     } elseif($level -ne 'final' -or $serial -ne '0') {
         $PackageVersion = "$major.$minor.$micro-$level$serial"
     }
     
     # store the package version to an environment variable
     Write-Host ("##vso[task.setvariable variable=PackageVersion;isSecret=false;isOutput=true;]$PackageVersion") 
    displayName: Grab Package Version

  - powershell: . make.ps1 
    displayName: Build

  - powershell: . make.ps1 'test-all' 
    displayName: Test

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: '**\*.trx'
      mergeTestResults: true
      testRunTitle: Windows

  - powershell: . make.ps1 package 
    displayName: Package

  - task: CopyFiles@2
    displayName: Copy Artifact Files
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)\Package\Release\Packages'
      Contents: |  
     **\*.nupkg
     **\*.zip
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: CopyFiles@2
    displayName: Copy Build Logs
    inputs:
      Contents: '*.binlog'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      ArtifactName: 'Windows Artifacts'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))


- phase: Linux_Build

  queue:
    name: Hosted Linux Preview
    condition: succeededOrFailed()
    demands: sh

  steps:
  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: Install Mono
    inputs:
      type: InlineScript
      script: |  
     
     echo "Installing Mono"
     sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
     sudo apt install apt-transport-https
     echo "deb https://download.mono-project.com/repo/ubuntu stable-xenial main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
     sudo apt update
     sudo apt-get -yq install mono-devel

  - powershell: |  
     # Write your powershell commands here.
     
     $xml = [xml] (Get-Content CurrentVersion.props)
     $major = $xml.Project.PropertyGroup.MajorVersion
     $minor = $xml.Project.PropertyGroup.MinorVersion
     $micro = $xml.Project.PropertyGroup.MicroVersion
     $serial = $xml.Project.PropertyGroup.ReleaseSerial
     $level = $xml.Project.PropertyGroup.ReleaseLevel
     
     if($level -eq 'final') {
         $PackageVersion = "$major.$minor.$micro"
     } elseif($level -ne 'final' -or $serial -ne '0') {
         $PackageVersion = "$major.$minor.$micro-$level$serial"
     }
     
     # store the package version to an environment variable
     Write-Host ("##vso[task.setvariable variable=PackageVersion;isSecret=false;isOutput=true;]$PackageVersion") 
    displayName: Grab Package Version

  - powershell: . make.ps1 
    displayName: Build

  - powershell: . make.ps1 'test-all' 
    displayName: Test

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      mergeTestResults: true
      testRunTitle: Linux

  - powershell: . make.ps1 package 
    displayName: Package

  - task: CopyFiles@2
    displayName: Copy Artifact Files
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/Package/Release/Packages'
      Contents: |  
     **/*.nupkg
     **/*.zip
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: CopyFiles@2
    displayName: Copy Build Logs
    inputs:
      Contents: '*.binlog'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      ArtifactName: 'Linux Artifacts'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))


- phase: macOS_Build

  queue:
    name: Hosted macOS Preview
    condition: succeededOrFailed()
  steps:
  - powershell: |  
     # Write your powershell commands here.
     
     $xml = [xml] (Get-Content CurrentVersion.props)
     $major = $xml.Project.PropertyGroup.MajorVersion
     $minor = $xml.Project.PropertyGroup.MinorVersion
     $micro = $xml.Project.PropertyGroup.MicroVersion
     $serial = $xml.Project.PropertyGroup.ReleaseSerial
     $level = $xml.Project.PropertyGroup.ReleaseLevel
     
     if($level -eq 'final') {
         $PackageVersion = "$major.$minor.$micro"
     } elseif($level -ne 'final' -or $serial -ne '0') {
         $PackageVersion = "$major.$minor.$micro-$level$serial"
     }
     
     # store the package version to an environment variable
     Write-Host ("##vso[task.setvariable variable=PackageVersion;isSecret=false;isOutput=true;]$PackageVersion") 
    displayName: Grab Package Version

  - powershell: . make.ps1 
    displayName: Build

  - powershell: . make.ps1 'test-all' 
    displayName: Test

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      mergeTestResults: true
      testRunTitle: macOS

  - powershell: . make.ps1 package 
    displayName: Package

  - task: CopyFiles@2
    displayName: Copy Artifact Files
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/Package/Release/Packages'
      Contents: |  
     **/*.nupkg
     **/*.zip
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: CopyFiles@2
    displayName: Copy Build Logs
    inputs:
      Contents: '*.binlog'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      ArtifactName: 'macOS Artifacts'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))


