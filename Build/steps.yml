parameters:
  os: ''

steps:
  - powershell: |

     $xml = [xml] (Get-Content CurrentVersion.props)
     $major = $xml.Project.PropertyGroup.MajorVersion
     $minor = $xml.Project.PropertyGroup.MinorVersion
     $micro = $xml.Project.PropertyGroup.MicroVersion
     $serial = $xml.Project.PropertyGroup.ReleaseSerial
     $level = $xml.Project.PropertyGroup.ReleaseLevel

     if($level -eq 'final') {
         $PackageVersion = "$major.$minor.$micro"
     } elseif($level -ne 'final' -or $serial -ne '0') {
         $PackageVersion = "$major.$minor.$micro-$level$serial"
     }

     # store the package version to an environment variable
     Write-Host ("##vso[task.setvariable variable=PackageVersion;isSecret=false;isOutput=true;]$PackageVersion")
    displayName: Grab Package Version

  - task: UseDotNet@2
    displayName: Install .NET Core 3.1 runtime for testing
    inputs:
      packageType: 'runtime'
      version: '3.1.x'

  - task: UseDotNet@2
    displayName: Install .NET 6.0 runtime for testing
    inputs:
      packageType: 'runtime'
      version: '6.0.x'

  - task: UseDotNet@2
    displayName: Install .NET 8.0 SDK for build
    inputs:
      packageType: 'sdk'
      version: '8.0.x'

  - task: UseDotNet@2
    displayName: Install .NET 9.0 SDK for build
    inputs:
      packageType: 'sdk'
      version: '9.0.x'
      includePreviewVersions: true

  # Set Mono version on macOS
  - ${{ if eq(parameters.os, 'macOS') }}:
    - task: Bash@3
      displayName: Set Mono Version
      inputs:
        targetType: inline
        script: |
          # use Mono 6.4.0 version
          SYMLINK=6.4.0
          MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$SYMLINK
          echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
          echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
          echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$PATH"

  # Dump version info
  - task: PowerShell@2
    displayName: Version Information
    inputs:
      targetType: inline
      script: |
        dotnet --info
        try { msbuild -version } catch { }
        try { mono --version } catch { }

  - powershell: ./make.ps1
    displayName: Build

  - powershell: ./make.ps1 package
    displayName: Package

  - task: CopyFiles@2
    displayName: Copy Artifact Files
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/Package/Release/Packages'
      Contents: |
       **/*.nupkg
       **/*.snupkg
       **/*.zip
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['system.pullrequest.isfork'], false))

  - task: CopyFiles@2
    displayName: Copy Build Logs
    inputs:
      Contents: '*.binlog'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeededOrFailed(), eq(variables['system.pullrequest.isfork'], false))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      ArtifactName: ${{ format('{0} Artifacts', parameters.os) }}
    condition: and(succeededOrFailed(), eq(variables['system.pullrequest.isfork'], false))

  - powershell: ./make.ps1 test-all
    displayName: Test

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      mergeTestResults: true
      testRunTitle: ${{ parameters.os }}


