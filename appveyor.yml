# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
# NOTE: version is now generated in "before_build:"
#version: x.y.z-{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2017

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

# build cache to preserve files/folders between builds
cache:
  - '%LocalAppData%\NuGet\Cache'

# Automatically register private account and/or project AppVeyor NuGet feeds.
nuget:
  account_feed: true
  project_feed: true
  disable_publish_on_pr: true     # disable publishing of .nupkg artifacts to
                                  # account/project feeds for pull request builds

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

install:
- ps: (New-Object Net.WebClient).DownloadFile('https://dist.nuget.org/win-x86-commandline/v4.3.0/nuget.exe', 'C:\Tools\NuGet\NuGet.exe')

# scripts to run before build
before_build:
  - nuget restore
  - ps: $xml = [xml] (Get-Content CurrentVersion.props); $major = $xml.Project.PropertyGroup.MajorVersion; $minor = $xml.Project.PropertyGroup.MinorVersion; $micro = $xml.Project.PropertyGroup.MicroVersion; $serial = $xml.Project.PropertyGroup.ReleaseSerial; Update-AppveyorBuild -Version "$($major).$($minor).$($micro).$($serial)-$($env:APPVEYOR_BUILD_NUMBER)".replace(" ","")

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# scripts to run after build
after_build:

# to run your custom scripts instead of automatic MSBuild
build_script:
  - make.cmd package-release

# to disable automatic builds
#build: off

# to run your custom scripts instead of automatic tests
test_script:
  - '%APPVEYOR_BUILD_FOLDER%/bin/%CONFIGURATION%/net40/Metadata.exe'
  - '%APPVEYOR_BUILD_FOLDER%/bin/%CONFIGURATION%/net45/Metadata.exe'
  - 'dotnet %APPVEYOR_BUILD_FOLDER%/bin/%CONFIGURATION%/netcoreapp2.0/Metadata.dll'
  - '%APPVEYOR_BUILD_FOLDER%/packages/NUnit.ConsoleRunner/3.7.0/tools/nunit3-console.exe %APPVEYOR_BUILD_FOLDER%/bin/%CONFIGURATION%/net40/Microsoft.Dynamic.Test.dll'
  - '%APPVEYOR_BUILD_FOLDER%/packages/NUnit.ConsoleRunner/3.7.0/tools/nunit3-console.exe %APPVEYOR_BUILD_FOLDER%/bin/%CONFIGURATION%/net45/Microsoft.Dynamic.Test.dll'
  - '%APPVEYOR_BUILD_FOLDER%/packages/NUnit.ConsoleRunner/3.7.0/tools/nunit3-console.exe %APPVEYOR_BUILD_FOLDER%/bin/%CONFIGURATION%/net40/Microsoft.Scripting.Test.dll'
  - '%APPVEYOR_BUILD_FOLDER%/packages/NUnit.ConsoleRunner/3.7.0/tools/nunit3-console.exe %APPVEYOR_BUILD_FOLDER%/bin/%CONFIGURATION%/net45/Microsoft.Scripting.Test.dll'
  #- make test
  #- Test\test-ipy-tc.cmd /category:Languages\IronPython\IronPython\2.X

# to run custom scripts after tests
#after_test:
  # upload results to AppVeyor
  # NOTE: our test runner returns an exit code with number of failures
  # AppVeyor misinterprets that and does not upload test results
  # Workaround in that case is to add to "on_failure:" and "on_success:"
  # to force an upload
  #- ps: $wc = New-Object 'System.Net.WebClient'; $wc.UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\Test\TestResult.xml))

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:
  - path: Package/Release/**/DynamicLanguageRuntime*.zip
    name: Zip Package
    type: Zip

  - path: Package/Release/**/*.nupkg
    name: NuGet Package
    type: NuGetPackage

  - path: build-*.binlog
    name: Binary Build Log
    type: File


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
#deploy:

#    # Deploying to NuGet feed
#  - provider: NuGet
#    server: https://my.nuget.server/feed
#    api_key:
#      secure: FYWX6NfjZIVw==
#    skip_symbols: false
#    symbol_server: https://your.symbol.server/feed
#    artifact: MyPackage.nupkg

#    # Deploy to GitHub Releases
#  - provider: GitHub
#    artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
#    draft: false
#    prerelease: false
#    on:
#      branch: master                # release from master branch only
#      appveyor_repo_tag: true       # deploy on tag push only

#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  # upload test results to AppVeyor
  #- ps: $wc = New-Object 'System.Net.WebClient'; $wc.UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\Test\TestResult.xml))

# on build failure
on_failure:
  # upload test results to AppVeyor
  #- ps: $wc = New-Object 'System.Net.WebClient'; $wc.UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\Test\TestResult.xml))

# after build failure or success
#on_finish:
#  - do something
  
#---------------------------------#
#         notifications           #
#---------------------------------#
  
notifications:

  # Email
  - provider: Email
    to:
      - developers+int+211+854770831703316759@ironpython.groups.io
    subject: 'DLR Build {{status}}'
    #message: "{{message}}, {{commitId}}, ..."    # optional
    on_build_status_changed: true

  # Gitter
  - provider: Webhook
    url: https://webhooks.gitter.im/e/b21a2ccce686293e02f7
    #headers: ? message payload? how to differentiate projects?
    on_build_success: true
    on_build_failure: true
    on_build_status_changed: true
